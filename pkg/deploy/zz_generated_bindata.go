// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\xab\xdb\x30\x0c\xc6\xef\xfe\x2b\x4c\x2f\x85\x81\x5b\xc6\x2e\x23\xc7\xed\xb0\x7b\x61\xbb\x2b\xb6\xd6\x7a\x75\x2c\x23\xc9\x29\xdb\x5f\x3f\xd2\xf4\x3d\x4a\xf2\x5a\x92\xde\x44\x90\x7e\xdf\xa7\xc8\x1f\x94\xf8\x0b\x59\x22\xe5\xc6\x72\x0b\x7e\x07\x55\x4f\xc4\xf1\x1f\x68\xa4\xbc\x3b\x7f\x95\x5d\xa4\x7d\xff\xd9\x9c\x63\x0e\x8d\xfd\x9e\xaa\x28\xf2\x81\x12\x9a\x0e\x15\x02\x28\x34\xc6\xda\x0c\x1d\x36\xf6\xfc\x45\x9c\x4f\x54\x83\xf3\x94\x95\x29\x25\x64\xd7\x41\x86\x23\xb2\xe1\x9a\x50\x1a\xe3\x2c\x94\xf8\x83\xa9\x16\x19\x06\x9d\xf5\x44\x1c\x62\xbe\xd7\x33\xd6\x32\x0a\x55\xf6\x78\x6b\x4a\x08\x82\x62\xac\xed\x91\xdb\xdb\xb7\x23\xea\x08\x60\x04\xc5\x6b\x59\x4b\x18\xca\x99\xc6\x66\x33\x47\x62\x8f\x59\x27\xc8\x3b\x54\x01\xf5\xa7\xd5\xd0\x4c\x61\x6a\x73\xfb\x69\xbb\x62\x76\x2f\x0a\x5a\x27\x88\xd1\xcb\x22\x88\x20\xf7\xd1\x4f\x3d\xa4\x28\xfa\xf1\x56\x43\x79\x59\x8d\x07\xef\xa9\x3e\xfa\x7b\x8b\x40\x65\x78\x74\xa2\x98\xb5\xa7\x54\xbb\x47\xb7\x7d\x37\xfe\x9a\x5d\xcc\xa1\x50\x7c\x76\xe6\x99\xd0\x65\x76\x77\xe7\xcc\xeb\x29\xf9\x16\x73\x88\xf9\xb8\x3a\x2c\x94\xf0\x80\xbf\x87\xee\xb7\x35\x9f\x28\x1b\x6b\xe7\xf1\x5c\xa4\x23\xb5\xfd\x83\x5e\xaf\xb9\x1c\x11\x3f\x05\x79\xd9\xec\xd8\x24\x05\xfc\xd0\x59\x5b\x74\xf2\x57\x14\x3b\xf3\x3f\x00\x00\xff\xff\x37\xa3\x5f\x88\x54\x04\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xd1\x6f\xdb\xbe\x11\x7e\xf7\x5f\x41\x68\xc8\xdb\xe4\xc4\x0b\xda\x65\x7c\x4b\x63\xb7\x0d\xd0\xb8\x86\xed\x14\x28\x86\x21\x38\x53\x67\x8b\x0b\xc5\xe3\x48\xca\x8d\xd7\xe5\x7f\x1f\x28\xc9\xb2\xe8\x28\x59\x9a\xf5\xe7\x17\x4b\x3c\xde\x77\xe4\xc7\xe3\x77\x27\x30\xf2\x1b\x5a\x27\x49\x73\xb6\x1d\x0d\xee\xa5\xce\x38\x5b\xa0\xdd\x4a\x81\x97\x42\x50\xa9\xfd\xa0\x40\x0f\x19\x78\xe0\x03\xc6\x34\x14\xc8\x99\x20\x8b\x99\x76\xcd\xbb\x33\x20\x90\xb3\xfb\x72\x85\xa9\xdb\x39\x8f\xc5\x20\x4d\xd3\x41\x17\xda\xae\x40\x0c\xa1\xf4\x39\x59\xf9\x6f\xf0\x92\xf4\xf0\xfe\xc2\x0d\x25\x9d\xb6\x41\xaf\x54\xe9\x3c\xda\x39\x29\x8c\x22\x2a\x58\xa1\x72\xe1\x89\x55\x21\xac\x46\x8f\x95\xeb\x8a\xc8\x3b\x6f\xc1\x18\xa9\x37\x75\x8c\x34\xc3\x35\x94\xca\xbb\x76\xa9\xf5\x82\xf8\x7e\xc5\xb6\x54\xe8\xf8\x20\x65\x60\xe4\x27\x4b\xa5\xa9\x90\x53\x96\x24\x03\xc6\x2c\x3a\x2a\xad\xc0\x66\x0c\x75\x66\x48\xea\x0a\x2c\x65\xae\x26\xa5\x7e\x31\x94\xd5\x0f\xed\xfe\xc3\xeb\x16\xed\xaa\xf1\x55\xd2\xf9\xea\xe1\x07\x78\x91\x3f\x8d\x97\x49\x27\x68\x8b\x76\xd7\xf0\xf0\x42\x74\x25\xff\x27\xfa\xff\xc5\xf6\x07\xa9\x33\xa9\x37\x11\xe9\xa0\x35\xf9\xca\xb3\x61\xbe\x0f\x32\x3a\x0c\x28\x3d\x95\x26\x03\x8f\x9c\x25\xde\x96\x98\xfc\xfe\xb3\x23\x85\x73\x5c\x57\xeb\x6b\xd8\x7c\x61\xaf\x03\xc6\x9e\x26\xd6\x33\xc8\xae\x5c\xfd\x13\x85\xaf\x12\xa3\xf7\x0a\xbc\x39\xf1\x0f\x84\x93\x5e\xcb\xcd\x0d\x98\xb7\x5c\xa7\xfd\xf4\x2b\xb2\xb8\x96\x0a\x39\xfb\x4f\xc5\xe9\x90\xbf\x3b\x67\x3f\xab\xc7\xf0\x43\x6b\xc9\xba\xf6\x35\x47\x50\x3e\x6f\x5f\x2d\x42\xb6\x6b\xdf\x0e\xc7\xc1\x4e\x7e\x5e\x7d\xb9\x5d\x2c\x27\xf3\xbb\xf1\xd7\x9b\xcb\xeb\xe9\xe3\x09\x93\x3a\x85\x2c\xb3\x43\xb0\x06\x98\x34\xef\xeb\x87\x43\x24\x56\xdd\x00\x26\xb5\x43\x51\x5a\xec\x8c\xaf\x41\x29\x9f\x5b\x2a\x37\x79\x3f\x4a\x3b\xf7\xf1\xb0\x50\x72\xde\xb1\x53\xf4\xe2\xb4\xa1\xe2\x74\x4a\x19\x7e\xae\x86\xbb\x41\xbd\x57\xec\xfd\x59\x67\xc0\xa2\x22\xc8\xd8\xe8\x9d\xeb\x5f\x42\x4f\x30\x63\xa9\x40\x9f\x63\xe9\x18\xff\xdb\xe8\xdd\x79\x6b\x58\x93\xfd\x01\x36\x63\xc3\x7a\x25\xe1\x3a\xaa\xed\x50\x90\x5e\xb7\x53\x04\x88\x1c\xd9\xf9\x61\x05\x8a\xc8\x0c\xe2\xc5\x74\x6c\x90\xad\x40\x81\x16\x35\x3f\x8f\x4f\x92\x03\x8c\x71\x87\x2b\x39\x46\xa3\x68\x57\xe0\xdb\x14\xf7\xe8\xb2\x5d\xb8\x14\x8c\x69\xa6\xd4\x8e\xc7\x57\xb0\x06\x4e\x42\x4e\x8d\xa7\x8b\x64\xe0\x0c\x8a\xe0\xfd\x27\x8b\x46\x49\x01\x8e\xb3\xd1\x80\xb1\x70\x4b\x3d\x6e\x76\x35\xb0\xdf\x19\xe4\x6c\x4e\x4a\x49\xbd\xb9\xad\xee\x7b\xad\x0f\xdd\x11\xde\x70\x50\xc0\xc3\xad\x86\x2d\x48\x05\xab\x90\xb4\x15\x1c\x2a\x14\x9e\x6c\x3d\xa7\x08\xfa\xf5\xa5\xb3\xf0\xfe\xa5\x7b\x2c\x8c\x6a\x81\xbb\xec\x54\x44\x47\xfe\xcf\x6d\x7e\xbf\xbd\x3a\x07\x24\x59\xe9\x77\x57\x0a\x9c\x9b\xd6\x3c\xd4\x3c\xa6\xa2\x56\x8b\x54\x58\xe9\xa5\x00\x95\x34\x2e\x2e\x12\x84\xe9\xd1\xa1\x54\xd4\x90\x42\xdb\xd5\xcc\xf0\x4b\xd9\x3d\xee\x02\xcb\x0d\xdc\x65\x96\x91\x76\x5f\xb5\xda\x25\x9d\x8c\x25\x13\x3c\xc9\x72\x96\x4c\x1e\xa4\xf3\x2e\x79\x02\xa0\x29\xc3\x34\x28\xe0\x91\xee\x0a\xd2\xde\x92\x4a\x8d\x02\x8d\xaf\xc4\x64\x0c\xd7\x6b\x14\x9e\xb3\x64\x4a\x0b\x91\x63\x56\x2a\x7c\x7d\xc8\x02\x02\x43\xbf\x23\x56\x88\xb0\x88\x12\x22\xfc\x56\xe8\xe1\x28\x24\x39\xce\x94\xd4\xe5\x43\x33\x29\xec\x1a\xa4\x46\xdb\x52\x9d\x3e\xb9\x28\xf5\x4f\x16\xb0\x41\xce\x4e\x7e\x2e\xbe\x2f\x96\x93\x9b\xbb\xf1\xe4\xe3\xe5\xed\x97\xe5\xdd\x7c\xf2\xe9\x7a\xb1\x9c\x7f\x7f\x3c\xb1\xa0\x45\x8e\x76\x2f\x3d\x69\xf3\xcf\x47\xc3\x8b\xe1\x79\x8c\x33\x2b\x95\x9a\x91\x92\x62\xc7\xd9\xf5\x7a\x4a\x7e\x66\xd1\x61\x55\x1f\xf6\x12\xd0\xa9\xe1\xad\x10\xc8\x42\xfa\x68\x24\xe4\x70\x41\x76\xc7\xd9\xe8\xaf\x67\x37\x32\x12\xb4\x7f\x95\xe8\x8e\x67\x0b\x53\x72\x36\x3a\x3b\x2b\x7a\x31\x22\x08\xb0\x1b\xc7\xd9\xdf\x59\x92\x06\xe5\x4a\xfe\xcc\x92\x48\x57\xf7\x15\x24\x61\xff\x68\x5d\xb6\xa4\xca\x02\x6f\x42\x5e\x47\x99\xbb\x27\x34\x14\xae\xb4\x9e\xd4\x89\x5f\x84\xf9\x33\xf0\x39\x8f\x94\x3b\xda\x0b\x64\x21\xd3\x39\x0b\xfd\xc0\x41\x80\xc9\xc6\x71\xda\xc3\x9c\x91\xf5\x9c\x75\x24\x79\xaf\x7e\x31\xae\xb1\xe4\x49\x90\xe2\xec\x76\x3c\xfb\x55\x9c\xd4\x0b\xd3\x8b\xb5\xbc\x7a\x01\x2b\x2a\x14\x7b\xb4\x02\xbd\x95\xa2\x7f\x65\x5d\xb4\xaa\x46\x06\xb5\x21\xed\xf1\xc1\x77\x8f\x16\x94\xa2\x1f\x33\x2b\xb7\x52\xe1\x06\x27\x4e\x80\xaa\x14\x84\x87\x22\xe6\xba\x74\x0b\x30\xb0\x92\x4a\x7a\x89\x47\xc9\x01\x59\x16\x0f\xa4\x6c\x3a\x59\xde\x7d\xb8\x9e\x8e\xef\x16\x93\xf9\xb7\xeb\xab\x49\x64\xce\x2c\x99\x63\x07\x50\xaa\xe7\xe0\xe6\x44\xfe\xa3\x54\xd8\x74\x4b\xf1\x31\x2a\xb9\x45\x8d\xce\xcd\x2c\xad\xb0\x8b\x97\x7b\x6f\x3e\xa1\x8f\x43\x98\x3a\x51\x8e\x5a\x12\xd6\xa4\x03\x67\x17\x67\x17\x67\xd1\xb0\x13\x39\x06\x92\x3f\x2f\x97\xb3\x8e\x41\x6a\xe9\x25\xa8\x31\x2a\xd8\x2d\x50\x90\xce\x1c\x8f\x5b\x02\x83\x56\x52\xd6\xda\x46\x5d\x9b\x97\x05\x52\xe9\x0f\xc6\x8e\xcd\x95\x42\xa0\x73\xcb\xdc\xa2\xcb\x49\x65\xb1\x75\x0d\x52\x95\x16\x3b\xd6\xf3\xa8\xb1\x92\xbf\x4c\x45\xdc\x8e\x75\x98\x18\x5d\x8c\xde\xcc\xc4\x0b\x44\xfc\xe5\x0f\xe6\x21\xd3\x6e\x2f\x8d\xe3\xba\x91\x6f\x0c\xb5\x72\xfc\x82\xb2\x88\x7d\xab\x1c\xf3\xd6\xaf\xef\x15\x15\x1e\x0b\x77\x9c\xd2\x55\x0d\xdb\xcb\x5d\x64\xdb\x1f\x41\xaf\xb1\x71\x6c\xfb\xcf\x5e\xcf\x83\xf5\xd9\x7e\xbf\xf9\x80\xe8\x69\xe5\x3a\x5d\xc9\xb3\xbd\xdc\x93\xef\xaf\x43\xd7\x1a\xca\x61\x9d\x29\x49\x50\xa5\xa4\xc7\xec\x84\x05\xf3\xec\x77\xd8\x2b\x5a\xc3\x7d\x13\xd4\x34\x3d\x1d\xa4\xd7\x36\x91\x71\x9b\xd7\x17\xb3\x89\x71\x3d\xe3\xdd\x0f\x90\xe9\xe2\xf1\x64\xd0\xa9\x11\xe9\x51\x05\x30\x5d\x69\x3f\x2e\x04\x69\x8f\xcc\x3f\xe3\x50\xeb\x73\xda\xa3\xe4\x26\x16\xfc\xd8\xe5\xbf\x01\x00\x00\xff\xff\x55\x76\x26\xa9\x2f\x11\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6f\xdb\x36\x14\xbf\xeb\xaf\x78\xd3\x9a\xc3\x86\xd2\x49\xb6\xc3\x36\x16\x3b\xb8\xb6\x93\x05\x88\x3f\x60\x7b\x1b\x8a\xa2\x30\x68\xea\xd9\x66\x43\x91\x04\x49\xb9\x75\xb3\xfc\xef\x03\x29\xd9\x91\x1c\x37\xb1\xb1\xed\x36\x5d\x04\x3e\xbe\xdf\xfb\xfe\x20\x33\xe2\x0f\xb4\x4e\x68\x45\x61\x7d\x99\xdc\x09\x95\x51\x98\xa0\x5d\x0b\x8e\x6d\xce\x75\xa1\x7c\x92\xa3\x67\x19\xf3\x8c\x26\x00\x8a\xe5\x48\x41\x6a\xce\x24\x31\xcc\xaf\x88\xb1\x7a\x2d\x02\x1e\x2d\x71\x25\x8e\xb0\x0a\x58\xb2\x3b\xc3\x38\x52\xb8\x2b\xe6\x48\xdc\xc6\x79\xcc\x13\x42\x48\x52\xd7\x6c\xe7\x8c\xb7\x58\xe1\x57\xda\x8a\x2f\xcc\x0b\xad\x5a\x77\x3f\xbb\x96\xd0\xe7\x3b\x9b\x3a\xb2\x70\x1e\xed\x58\x4b\x3c\xde\x20\x1b\xb8\x6d\x21\xd1\xd1\x84\x00\x33\xe2\xda\xea\xc2\x38\x0a\xef\xd3\xf4\x43\x02\x60\xd1\xe9\xc2\x72\x8c\x14\xa5\x33\x74\xe9\x6b\x48\x4d\x30\xcb\x79\x54\x7e\xad\x65\x91\x23\x97\x4c\xe4\xf1\x86\x6b\xb5\x10\xcb\x9c\x19\x17\xe1\x6b\xb4\xf3\x08\x5d\xa2\x0f\xd7\x52\xb8\xf8\xff\xc4\x3c\x5f\xa5\x1f\x5e\x56\x89\x2a\x33\x5a\x28\x7f\x50\x6d\x49\xd4\xd9\x9e\xae\xef\x8f\x12\xbc\xc6\x20\xb5\x01\xe4\x16\x99\xc7\x28\xf4\xb0\x7d\xce\x6b\xcb\x96\x58\x85\xfe\xa9\xd0\xea\x9e\x4b\xe6\x1c\x1e\x19\x81\x7f\x94\xe8\xb7\x42\x65\x42\x2d\x8f\xcf\xf7\x5c\xa8\x2c\x09\x49\x1f\xe3\x22\x30\x6f\xdd\x7b\x46\x71\x02\xf0\xb4\xc0\x8e\x29\x2b\x57\xcc\x3f\x22\xf7\xb1\xb2\x0e\xb6\xcd\x7f\xd5\x2c\xcc\x18\xf7\x18\xae\x2e\x1a\xa9\x37\x39\x9e\xd0\xa7\x5f\x57\xe5\x0c\x72\x1a\xd3\x6e\xa4\xe0\xcc\x51\xb8\x4c\x00\x1c\x4a\xe4\x5e\xdb\x70\x03\x90\x87\xd4\xde\xb2\x39\x4a\x57\x12\x42\x98\xcd\x33\xba\x3c\xe6\x46\x32\x8f\x15\xbc\x66\x64\xf8\x64\x43\xd2\x4b\xb2\x00\xb6\x26\x86\xcf\x58\xa1\xad\xf0\x9b\x4e\xa8\xc8\x41\xf4\x38\x2d\x3d\x21\xa1\x99\x09\xb7\xc2\x0b\xce\x64\x5a\xf1\xbb\x46\x82\x06\xa7\x65\x27\x7c\x5e\x4b\xb4\xb1\x7a\x6a\x16\x03\x10\xb8\xc3\x0d\x85\xb4\x53\xe9\x6b\x67\x99\x56\x6e\xa8\xe4\x26\xad\x71\x01\x68\x13\xd0\xda\x52\x48\x7b\x9f\x85\xf3\x2e\x3d\x20\x24\x5a\x1e\x2a\xac\x15\x32\x63\x15\x7a\x8c\x0d\xc2\xb5\xf2\x56\x4b\x62\x24\x53\x78\x82\x5c\x00\x5c\x2c\x90\x7b\x0a\xe9\x40\x4f\xf8\x0a\xb3\x42\xe2\x29\x8a\x73\x16\xfa\xe2\xdf\xd2\x18\xdc\x60\x42\xa1\xdd\x45\x90\xbc\x54\xac\xe5\x27\x72\xb6\x44\x0a\x67\xf7\x93\x77\x93\x69\xaf\x3f\xeb\xf6\xae\xda\xbf\xdf\x4e\x67\xe3\xde\xf5\xcd\x64\x3a\x7e\xf7\x70\x66\x99\xe2\x2b\xb4\xe7\x87\x05\xd1\xf5\x45\xeb\xa2\x75\xf9\x4b\x53\xe0\xa8\x90\x72\xa4\xa5\xe0\x1b\x0a\x37\x8b\x81\xf6\x23\x8b\x0e\x77\x09\x0f\xf6\xe6\x39\x53\xd9\x63\xba\xc9\x4b\x86\x12\x70\x9e\x59\x5f\x3b\x13\x52\x2e\x8e\x1a\xe9\x1c\x3d\x3f\x2f\xa9\xd5\xaf\xf5\xd1\x69\xb5\xe3\x28\x57\x40\x3f\xd4\x9e\xab\xeb\x2e\x43\x55\x22\x48\xc9\x54\x8b\x7c\x1e\xf8\x47\xcc\xaf\x68\x43\xc1\x8e\x03\xd5\xfa\xa9\xb0\xd1\xb0\x3b\x1b\xb4\xfb\xbd\xc9\xa8\xdd\xe9\xd5\x84\xad\x99\x2c\xf0\xca\xea\x9c\x36\x72\xbb\x10\x28\xb3\x6a\xbe\x3e\xa1\x97\xba\xb7\x3d\xde\xda\x8d\x99\xa4\xee\xd5\x09\x0e\x95\xf4\x3e\x33\x4d\x6d\x4f\x0a\xa6\x8a\xef\xfe\xa8\x6c\x6e\xb4\xc7\xa1\x39\x29\xe9\x71\x6e\x3c\x3b\x36\xc3\x0e\x51\x4a\xfb\x7a\xcf\xd7\xd7\xe0\x5e\xab\x08\x47\x32\x5c\xb0\x42\x7a\x12\xaf\x29\xa4\xde\x16\x98\x26\xf5\x3a\x84\xaa\x4e\x03\xa0\xa6\xa9\xf4\xbd\x5a\x79\x7d\x9d\x21\x85\x3f\x99\xf0\x57\xda\x5e\x09\xeb\x7c\x47\x2b\x57\xe4\x68\x13\x5b\xbe\x47\xb6\x45\xdb\x45\x89\x1e\xa3\xe7\xd5\x1e\xdb\x86\x2c\xd9\x7b\xdb\x3d\xbb\x1e\x76\x05\xfa\x95\xcd\xb0\x05\xd6\x6a\x95\xc2\x5f\x24\x06\xe4\xbe\xca\x4d\x9c\x20\xa1\x02\xfa\xcc\xa4\xf4\x7d\x45\xbd\xdf\x65\x2e\xde\xa7\x34\xdd\x76\xee\xa8\x3d\xfd\x6d\x76\x35\x1c\xcf\x06\xc3\xc1\xec\xf6\x66\x32\xed\x75\x67\x83\x61\xb7\x37\x49\x5f\x3f\x62\x82\x75\x2e\xa5\xef\xd3\xb3\xfb\x2d\xee\x76\xd8\x69\xdf\xce\x26\xd3\xe1\xb8\x7d\xdd\x8b\x52\x1e\xce\xe2\x6b\x24\x7c\x0f\xd5\xbf\x3c\x3f\xc4\xf5\xe5\xc3\x0b\xa0\x32\xf6\xdb\x6f\xce\xe7\x42\x9d\xbb\x55\x3c\x7d\x5a\x09\x89\xb0\x44\xaf\x8d\x77\x90\xe6\xd4\x51\x43\x53\xd0\xa6\x6c\xdf\x4c\x3f\xce\x01\xe6\x10\x5e\x69\xe3\x41\xa8\x46\x2d\x9a\xef\x1a\x47\x36\x77\x5a\x16\x3e\xc6\xe1\xd7\x57\xc3\xd1\xb4\x3d\xbe\x6e\x30\xbc\x79\xd3\x38\xba\x26\xdc\x89\x2f\x78\xa3\xde\x6e\x3c\xba\x63\xd0\x79\x13\xbd\xd6\x32\x54\xce\x4b\x48\x74\x8c\x57\xfe\xa9\xb2\xdb\xf2\xbb\x4c\x58\x20\x39\x5c\xfc\x74\x71\x01\xc4\xc0\xab\xfb\xba\x23\x0f\x71\x8d\x33\x9b\xe9\x4f\xea\xff\x48\x3e\x1b\x49\x9b\x03\xb1\x8b\x03\xf1\x5b\xa1\x34\x68\x47\x3a\x6b\x6d\x58\x2e\x77\x51\xdc\x6b\xd2\x40\x2a\xfb\x78\xa4\xb3\x83\x0f\xa6\xb2\x75\x4b\x69\xc4\x54\x4c\xf5\x57\xd1\xd7\x37\xec\x1e\x08\x4e\xdb\xaa\x62\x6e\x99\xdd\x90\x79\xe1\x36\x73\xfd\x99\x5e\xb6\x7e\xfc\xa1\x75\x99\xfc\x1d\x00\x00\xff\xff\xed\x49\x3f\xb1\x41\x0e\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x5d\x4b\x5b\x4d\x10\xbe\x3f\xbf\x62\x38\x2f\x92\x9b\x77\x13\x7b\x51\x28\x7b\x27\x9a\x96\x82\xda\x62\x6c\x41\x4a\x91\x71\xcf\xc4\x2c\xd9\x2f\x66\x26\x69\x0f\xe2\x7f\x2f\x6b\xe2\xa9\xf1\xa3\x08\xed\x5e\x2e\xcf\xd7\x3c\x33\xc6\x98\x06\x8b\xff\x4a\x2c\x3e\x27\x0b\xeb\x37\xcd\xd2\xa7\xce\xc2\x8c\x78\xed\x1d\x1d\x38\x97\x57\x49\x9b\x48\x8a\x1d\x2a\xda\x06\x20\x61\x24\x0b\x91\x94\xbd\x13\x23\xc4\x6b\xe2\xed\xb7\x14\x74\x64\x61\xb9\xba\x22\x23\xbd\x28\xc5\xe6\xb1\x03\x96\x22\x93\xc1\xe6\x88\x4a\xc8\x7d\xa4\xbf\xb2\x00\x08\x78\x45\x41\x2a\x13\x60\xf9\x4e\x0c\x96\xf2\x84\x2e\x85\x5c\x45\x08\x05\x72\x9a\x79\x83\x8e\xa8\x6e\x71\xfc\x80\xfe\xb2\x00\x80\x52\x2c\x01\x95\xb6\xd4\x07\x81\xeb\x7b\x21\x74\x7d\x61\xc7\xe0\x4f\x16\x00\xf7\x39\xeb\x2b\xec\x33\x7b\xed\x0f\x03\x8a\x9c\xde\xe9\xb7\x9b\xa1\x4d\xca\x1d\x19\xc7\x5e\xbd\xc3\xd0\x6e\xf1\xb2\xb3\xb5\xd3\x97\x03\x69\x0e\xc4\xa8\x3e\xa7\x07\xa9\x0c\x2c\xa9\xb7\xd0\x1e\x6e\x55\x0f\xba\x2e\x27\xf9\x94\x42\xdf\x0e\x18\x80\x5c\x2a\x33\xb3\x85\x76\xfa\xd3\x8b\x4a\xfb\x44\xe0\x2e\x1b\xe7\x40\xe3\xba\x26\x4e\xa4\x24\x63\x9f\x27\x2e\x27\xe5\x1c\x4c\x09\x98\xe8\x95\x9a\x00\x34\x9f\x93\x53\x0b\xed\x69\x9e\xb9\x05\x75\xab\x40\xaf\xb7\x8c\x28\x4a\xfc\x2f\xbc\xd6\x39\xac\x22\x0d\x75\xfd\x07\xb1\x76\x0c\x3e\x81\xc6\x02\x92\xe1\x07\x81\xc3\x04\x82\x73\x0a\x3d\xac\x84\x60\xce\x39\x1a\x71\x5c\x6f\x0c\x7c\xc4\x6b\x12\xc0\xd4\x4d\x32\x03\x13\x76\x26\xa7\xd0\x43\x2d\x05\x7d\x22\x96\xe6\x7e\xa4\xcd\x25\x69\x2c\xa6\xf3\x3c\xa4\xa3\x58\xb4\x3f\xf2\x6c\xe1\xe6\x76\xfb\xf9\x9b\x6b\x1f\x91\x9f\xdd\x3a\x6c\x42\x58\xd8\xbb\x99\x5d\xcc\xce\xa7\x27\x97\x47\xd3\xf7\x07\x5f\x8e\xcf\x2f\xcf\xa6\x1f\x3e\xce\xce\xcf\x2e\x6e\xf7\x18\x93\x5b\x10\x4f\xa2\x67\xce\x4c\x9d\xd9\x55\xb2\xeb\xfd\xf1\xdb\xf1\xfe\x20\x88\x7c\x2d\x16\xbe\x8d\x8c\x71\xc4\x5a\xf3\x8e\xfe\x87\xd1\x44\x63\x19\x7d\x1f\x40\x9b\xea\x4e\x6a\x5f\x3b\xe7\xf6\xfc\x9c\xb0\x69\xf6\x33\xea\xc2\x42\x55\x6a\x9a\x5f\x01\x00\x00\xff\xff\xbc\xb5\xfd\xd0\xa7\x04\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x26\xf7\x28\xe2\x1e\x24\x57\xcf\xc2\x82\xe2\xbd\x37\x5b\x48\x98\xfc\xd1\xdd\x33\xe0\xdb\xcb\xc4\x41\x10\xe6\xd6\x54\x57\x7d\x55\x21\x04\xc7\x23\x7f\x42\x34\xf7\x16\x69\x7b\x72\x4b\x6e\xf7\x48\xef\x90\x2d\x27\xb8\x0a\xe3\x3b\x1b\x47\x47\xd4\xb8\x22\x52\x85\x49\x4e\x1a\x14\xb2\x41\x0e\x59\x07\x27\x44\x5a\xd6\x1b\x82\x7e\xab\xa1\x3a\xa2\xc2\x37\x14\xdd\x93\x34\x3f\xd2\x60\xd0\x87\xdc\x1f\x7f\x49\xfe\xed\x1f\xca\x9f\x18\x53\x59\xd5\x20\xd3\x91\xf7\x06\x6f\xb2\xc2\x3b\x1d\x48\x3b\x58\x51\x90\xac\xcb\x51\xf2\xa2\x81\xc7\x38\xd9\x38\xba\xd8\x5c\x12\xe6\x19\xe9\x72\x79\x9e\x91\x21\xdd\x7a\xea\x25\xd2\xc7\xeb\x75\x2a\xc6\xf2\x05\xbb\xfe\xb9\x7e\x02\x00\x00\xff\xff\x92\x19\xf9\x3e\x23\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x0a\xeb\xf6\xf4\xc4\x86\xb2\x01\x03\xfb\x21\xb1\xbb\xa9\xb9\x33\x6d\xe3\xca\x76\x8a\xe0\xd3\xa3\x6b\xcb\x1f\x81\x74\x42\x62\xca\x4b\xe2\x9f\x9f\xde\x8b\x31\x06\x9c\xf8\x91\xd4\x58\x4a\x02\x6d\x31\x37\x58\xfd\x24\xca\x6f\xe8\x2c\xa5\xe9\xaf\xad\x61\xd9\xcf\x57\xa1\xe7\xd2\x25\xb8\x1b\xaa\x39\xe9\x41\x06\x0a\x23\x39\x76\xe8\x98\x02\x40\xc1\x91\x12\xd8\xab\x39\x8d\x69\x24\x57\xce\x16\x8d\x74\x26\x0d\x5a\x07\xb2\x14\x22\xe0\xc4\xf7\x2a\x75\xb2\x33\x11\x61\xb7\x0b\x00\x4a\x26\x55\x33\x6d\x6f\x93\x74\xb6\x88\x22\x1d\x7d\x53\x7b\x73\xf4\xed\x8e\x23\xd9\x84\x79\xf9\x9e\x49\xdb\x0d\x3d\x92\x2f\xe7\xc0\xb6\x8a\x17\xf4\x7c\x0a\xff\x0b\x79\xcb\xa5\xe3\x72\xfc\x7b\x56\x19\xe8\x40\x4f\xe7\xb1\x8f\xb4\x17\x2c\x03\xc0\xef\x5a\x2f\x1b\x58\x6d\x9f\x29\xfb\xd2\xe7\xca\x3e\x90\xce\x9c\xe9\x26\x67\xa9\xc5\x3f\xf1\x1f\x1c\x7c\xf5\x96\xa0\xaf\x2d\xc5\x75\x7f\x78\x0f\x00\x00\xff\xff\x39\x82\xcc\x46\x05\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\x3b\x6d\xb3\x09\x6b\x59\x14\x48\x2a\x41\xfb\xeb\x0b\xa7\x6e\x82\xa4\x76\x90\xb4\xdd\x24\x41\x7c\x1f\x1f\xf9\x20\xd3\x13\x8a\x12\xa7\xca\x4b\x0d\xcd\x12\x8a\x6d\x58\xe8\x0d\x8c\x38\x2d\xbb\xff\xba\x24\xfe\xb3\xfd\xeb\x3a\x4a\x6d\xe5\xef\x63\x51\x43\x59\x71\xc4\x3b\x4a\x2d\xa5\xb5\xeb\xd1\xa0\x05\x83\xca\x79\x9f\xa0\xc7\xca\x77\xa5\xc6\x00\x99\x14\x65\x8b\x12\x86\x6b\x44\x0b\xd0\xf6\x94\x9c\x70\xc4\x15\x3e\x0f\xbf\x21\xd3\x83\x70\xc9\x17\xc8\xce\xfb\x2f\xe0\x03\x47\x5f\xd5\xb0\xaf\x0e\xfa\x99\x46\x86\x96\xfa\x05\x1b\xd3\xca\x85\x9b\x20\x8f\x8a\x32\xe3\xc2\xb9\x10\x82\xfb\xfe\xb4\x26\xc6\xf4\xd9\xfe\x3f\x0d\x0d\x27\x13\x8e\x11\xc5\x49\x89\x78\xd2\xb8\x0e\x15\xc1\x2f\x16\xce\x7b\x41\xe5\x22\x0d\x8e\x6f\x89\x5b\x54\xe7\xfd\x16\xa5\x1e\x9f\xd6\x68\x57\xd6\x42\x8f\x9a\xa1\x39\x17\x88\xa4\xb6\x3f\xec\xc0\x9a\xcd\x84\x56\x42\xdb\xb1\x74\x94\xd6\xa3\xdf\x29\xf1\x8f\x3f\x99\x23\x35\x74\x33\x61\x42\x10\x53\x9b\x99\x92\xe9\xfe\x96\xb9\x9d\xd3\x1c\xfc\x1f\xb5\x7f\xb8\xb4\xf9\x88\xcf\xec\xee\xf7\xb3\x7d\x0a\x38\x06\x7b\xf0\x78\x1d\xe3\x2c\xdc\x97\x01\xef\x01\x00\x00\xff\xff\x46\xd3\x6d\x9d\x0f\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x23\x4b\x39\x6e\xdc\x72\xaa\xf6\x16\x52\x03\x15\x50\x50\x9c\x82\x7a\x8a\xd6\xeb\x49\xbc\xca\x7a\xd7\x9a\x19\x07\x42\xe9\x7f\x47\x1b\xb7\x69\x90\x2a\x15\x21\x90\x4f\x1e\xcf\x7c\xf3\xe6\x3d\x2b\xa5\x32\xd3\xbb\x2f\x48\xec\x62\xd0\xd0\xa2\xef\xa6\xd6\x88\x78\x9c\xba\x58\xec\xce\xb3\xad\x0b\x8d\x86\x77\xe8\xbb\x79\x6b\x48\xb2\x0e\xc5\x34\x46\x8c\xce\x00\x82\xe9\x50\x83\x90\xc1\xb5\xdb\x2a\x4b\xcd\x43\x8d\x7b\x63\x51\xc3\x76\xa8\x51\xf1\x9e\x05\xbb\x8c\x7b\xb4\x69\xc4\x26\x88\x86\x56\xa4\x67\x5d\x14\x93\xbb\xf7\x37\xaf\xcb\xc5\x75\xb9\x2c\xab\xd5\xec\xf3\xd5\xfd\xa4\x60\x31\xe2\x6c\x71\x68\xe4\xe2\x04\xae\xce\xcf\xa6\xe9\x91\xcd\x8f\xec\x1f\xea\xfe\x7f\x9a\x4f\xf4\x02\x30\x4a\x62\x01\x6c\x7c\xac\x8d\x9f\x8e\x3b\x2e\x71\x6d\x06\x2f\x0b\xdc\x38\x16\xda\x6b\xc8\x27\x77\xd5\x6d\xb5\x2c\x3f\xae\x2e\xcb\x37\xb3\x9b\x0f\xcb\xd5\xa2\x7c\x7b\x55\x2d\x17\xb7\xab\xc5\xec\xeb\xfd\x24\xcf\x00\x76\xc6\x0f\xc8\xf3\x18\x04\x83\x68\xf8\xa9\x0e\x5c\xaa\x8d\x1d\x37\x00\x60\x30\xb5\xc7\x26\xdd\x38\xe0\xa1\xd6\x47\x12\x7e\xfc\xfc\x0d\x6b\x46\x3b\x10\x3e\x16\x00\xc4\xf3\xd3\xcb\xf3\x80\x66\x16\x42\x4c\x87\xc6\x70\xec\xed\x29\x76\x28\x2d\x0e\x9c\x6c\x4f\x4b\x34\xe4\x17\x67\x17\xaf\xf2\x67\x1b\xd8\x92\xe9\x51\x43\x9e\xb0\x63\x4b\x4f\x71\xe7\x1a\xa4\x23\x32\x25\x40\x01\x05\xf9\x2a\x6c\x08\xf9\x44\x57\x3f\xd4\xde\x71\x8b\x4d\x85\xb4\x73\x16\x5f\x50\x4c\x2e\x92\x93\xfd\xdc\x1b\xe6\xeb\x43\xe4\xf9\xe8\xba\xb2\x7e\x60\x41\x52\x96\x9c\x38\x6b\xfc\x28\xc5\x75\x66\x73\x64\x8e\xff\x48\x4e\x26\xd8\x16\xa9\xf0\xae\x26\x43\x7b\xf5\x90\xed\x38\x20\xd1\x23\x9d\x1a\xa2\x60\x8b\x29\xc4\xf9\x03\x77\xd6\x34\x31\xf0\xa7\xe0\xf7\x8f\x7e\xc4\x3e\x4d\x44\xd2\x90\x97\xdf\x1d\x0b\xe7\xbf\x0d\x86\xd8\xa0\xa2\xe8\x71\xfa\x64\x43\x32\xce\xc6\x20\x14\xbd\xea\xbd\x09\xf8\x02\x0b\x00\xd7\x6b\xb4\x29\x89\xeb\x58\xd9\x16\x9b\xc1\xe3\x9f\xad\xe9\x4c\xb2\xe5\xef\xf8\xbf\x02\x00\x00\xff\xff\x8b\xb7\x84\x33\x4b\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
